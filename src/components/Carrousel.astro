---
import type { Image } from '../interfaces/projectItem'
import "../styles/variables.css";
interface Props {
    items: Image[]
}

const {items} = Astro.props;
---
<div class="images-container" id="carrousel">
    <div class="images-wrapper">
        {items.map(item => (
            <img src={`../../images/${item.image}`} alt={item.altText} width="300" height="300" />
        ))}
    </div>
    <div class="image-buttons">
        <button aria-label="Prev Image Button">
            <box-icon class="prev" name='left-arrow-circle' type='solid'></box-icon>
        </button>
        <button aria-label="Next Image Button">
            <box-icon class="next" name='right-arrow-circle' type='solid'></box-icon>
        </button>
    </div>
</div>

<style>
    .images-container {
        margin: 25px 0 25px 0;
        overflow: hidden;
        position: relative;
    }

    .images-wrapper {
        display: flex;
        transition: transform 600ms ease-in-out;
    }

    .image-buttons {
        position: absolute;
        inset: 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 4px;
        z-index: 2;
    }
    button {
        background-color: transparent;
        border: none;
    }
    .prev, .next{
        width: 35px;
        height: 35px;
        fill: var(--ternary-bg-color);
    }

    :global(.dark) .prev, :global(.dark) .next {
        fill: var(--dark-font-secondary-color);
    }
    img {
        width: 100%;
        height: auto;
        object-fit: contain;
    }
    .hidden {
        display: none;
    }
    @media screen and (min-width: 636px) {
        img {
            max-width: 400px;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {

        const imagesContainer = document.querySelector('.images-container') as HTMLElement;
        const imagesWrapper = document.querySelector('.images-wrapper') as HTMLElement;
        const prevButton = document.querySelector('.prev') as HTMLButtonElement;
        const nextButton = document.querySelector('.next') as HTMLButtonElement;
        
        let curr = 0;
        let isDragging = false;
        let touchInButton = false;
        let startX: number;

        const updateCarousel = () => {
            imagesWrapper.style.transform = `translateX(-${curr * 100}%)`;
        };

        prevButton.addEventListener('click', () => {
            curr = (curr == 0 ? imagesWrapper.children.length - 1 : curr - 1);
            updateCarousel();
        });

        nextButton.addEventListener('click', () => {
            curr = (curr === (imagesWrapper.children.length - 1) ? 0 : curr + 1);
            updateCarousel();
        });

        const handleTouchStart = (e: any) => {
            startX = e.touches[0].clientX;
            isDragging = true;
            touchInButton = e.target.closest('.prev') !== null;
            touchInButton = touchInButton || e.target.closest('.next') !== null;
        };

        const handleTouchMove = (e: any) => {
            if (!isDragging || touchInButton) return;
            const currentX = e.touches[0].clientX;
            const translateX = currentX - startX;
            if (Math.abs(translateX) > 30 && isDragging) {
                imagesWrapper.style.transform = `translateX(${translateX}px)`;
            }
        };

        const handleTouchEnd = () => {
            if (touchInButton) return;
            const translateX: number = parseInt(imagesWrapper.style.transform.replace('translateX(', '').replace('px)', '')) || 0;
            if (Math.abs(translateX) > 30 && isDragging) {
                if (translateX < 0) {
                    nextButton.click();
                } else {
                    prevButton.click();
                }
            }
            else {
                imagesWrapper.style.transform = 'translateX(0)';
            }
            isDragging = false;
        };
        
        imagesContainer.addEventListener('touchstart', handleTouchStart, {passive: true});
        imagesContainer.addEventListener('touchmove', handleTouchMove, {passive: true});
        imagesContainer.addEventListener('touchend', handleTouchEnd, {passive: true});
    });
</script>